generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model PublicUser {
  id         String      @id
  nic        String      @unique
  name       String
  phone      String
  complaints Complaint[]
}

model User {
  id   String @id
  name String

  officeId      String?
  office        Office?      @relation(fields: [officeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  actions   Action[]
  userRoles UserRole[]

  @@index([officeId])
  @@index([institutionId])
}

model UserRole {
  id    String @id @default(cuid())
  name  String
  users User[]
}

model Complaint {
  id                    Int     @id @default(autoincrement())
  complaint_title       String?
  complaint_description String?

  complainerId String?
  complainer   PublicUser? @relation(fields: [complainerId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  assignedInstitutionId String?
  assignedInstitution   Institution? @relation(fields: [assignedInstitutionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  investigation Investigation?

  @@index([complainerId])
  @@index([assignedInstitutionId])
}

model Institution {
  id             String          @id @default(uuid())
  name           String
  complaints     Complaint[]
  investigations Investigation[]
  users          User[]
  workflows      Workflow[]
  offices        Office[]
}

model Office {
  id          String     @id @default(uuid())
  name        String
  description String?
  type        OfficeType

  instiutionId String
  institution  Institution @relation(fields: [instiutionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  users                  User[]
  assignedInvestigations Investigation[] @relation(name: "AssignedInvestigation")
  involvedInvestigations Investigation[] @relation(name: "InvolvedInvestigation")
  workflows              Workflow[]

  offices  Office[] @relation(name: "Offices")
  office   Office?  @relation(name: "Offices", fields: [officeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  officeId String?

  @@index([instiutionId])
  @@index([officeId])
}

enum OfficeType {
  Division
  Branch
  BeatOffice
}

model Workflow {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  stages      Json?

  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])
  officeId      String?
  office        Office?     @relation(fields: [officeId], references: [id])

  investigations Investigation[]

  @@index([institutionId])
  @@index([officeId])
}

model Investigation {
  id          Int                 @id @default(autoincrement())
  status      InvestigationStatus @default(NotAssigned)
  description String?
  workflow    Json?

  complaintId Int?       @unique
  complaint   Complaint? @relation(fields: [complaintId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  institutionId         String
  institution           Institution @relation(fields: [institutionId], references: [id])
  officeId              String?
  office                Office?     @relation(name: "AssignedInvestigation", fields: [officeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  institutionWorkflowId Int?
  institutionWorkflow   Workflow?   @relation(fields: [institutionWorkflowId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  investigationStages InvestigationStage[]
  involvedParties     Office[]             @relation(name: "InvolvedInvestigation")

  @@index([officeId])
  @@index([institutionWorkflowId])
  @@index([institutionId])
}

enum InvestigationStatus {
  NotAssigned
  Ongoing
  Completed
}

model InvestigationStage {
  id          Int     @id @default(autoincrement())
  stageName   String
  description String?
  order       Int
  tasks       Json?

  investigationId Int
  investigation   Investigation @relation(fields: [investigationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  actions Action[]
  status  String   @default("Pending")

  @@index([investigationId])
}

model Action {
  id                   Int                 @id @default(autoincrement())
  investigationStage   InvestigationStage? @relation(fields: [investigationStageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  investigationStageId Int?
  name                 String
  description          String?
  user                 User                @relation(fields: [userId], references: [id])
  userId               String              @unique

  @@index([investigationStageId])
}