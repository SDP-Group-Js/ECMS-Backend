generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model PublicUser {
  id         String      @id
  nic        String      @unique
  name       String
  phone      String
  complaints Complaint[]
}

model User {
  id            String               @id
  name          String
  officeId      String?
  office        Office?              @relation(fields: [officeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  assignedWork  InvestigationStage[]
  division      Division?            @relation(fields: [divisionId], references: [id])
  divisionId    String?
  instiution    Institution?         @relation(fields: [institutionId], references: [id])
  institutionId String?

  @@index([officeId])
  @@index([institutionId])
  @@index([divisionId])
}

model Complaint {
  id                    Int            @id @default(autoincrement())
  complaint_title       String?
  complaint_description String?
  complainerId          String
  complainer            PublicUser     @relation(fields: [complainerId], references: [id])
  assignedInstitutionId String?
  assignedInstitution   Institution?   @relation(fields: [assignedInstitutionId], references: [id])
  investigation         Investigation?

  @@index([complainerId])
  @@index([assignedInstitutionId])
}

model Institution {
  id             String          @id @default(uuid())
  name           String
  complaints     Complaint[]
  investigations Investigation[]
  users          User[]
  workflows      Workflow[]
  divisions      Division[]      @relation("DivisionToParent")
}

model Division {
  id            String          @id @default(uuid())
  name          String
  institution   Institution     @relation("DivisionToParent", fields: [id], references: [id])
  users         User[]
  offices       Office[]
  investigation Investigation[]

  @@index([id])
}

model Office {
  id             String          @id @default(uuid())
  name           String
  investigations Investigation[]
  division       Division?       @relation(fields: [divisionId], references: [id])
  divisionId     String?
  officers       User[]

  @@index([divisionId])
}

model Workflow {
  id            Int             @id @default(autoincrement())
  institutionId String?
  institution   Institution?    @relation(fields: [institutionId], references: [id])
  stages        Json?
  investigation Investigation[]

  @@index([institutionId])
}

model Investigation {
  id                  Int                  @id @default(autoincrement())
  institutionId       String
  workflowId          Int
  workflow            Workflow             @relation(fields: [workflowId], references: [id])
  institution         Institution[]
  complaintId         Int                  @unique
  complaint           Complaint            @relation(fields: [complaintId], references: [id])
  investigationStages InvestigationStage[]
  division            Division?            @relation(fields: [divisionId], references: [id])
  office              Office?              @relation(fields: [officeId], references: [id])
  officeId            String?
  divisionId          String?

  @@index([officeId])
  @@index([divisionId])
  @@index([workflowId])
}

model InvestigationStage {
  id              Int           @id @default(autoincrement())
  stageName       String
  investigationId Int
  investigation   Investigation @relation(fields: [investigationId], references: [id])
  officers        User[]
  actions         Action[]

  @@index([investigationId])
}

model Action {
  id                   Int                 @id @default(autoincrement())
  investigationStage   InvestigationStage? @relation(fields: [investigationStageId], references: [id])
  investigationStageId Int?
  name                 String
  description          String?

  @@index([investigationStageId])
}
